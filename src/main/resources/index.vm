#set($title="Legends Browser") #decorate("layout.vm")

<div class="panel panel-primary">
	<div class="panel-heading">
		<h3 class="panel-title">Civilizations</h3>
	</div>
	<div class="panel-body">
		<div class="pull-right">

			<div>

				<!-- Nav tabs -->
				<ul class="nav nav-tabs" role="tablist">
					<li role="presentation" class="active"><a href="#tab-map"
						aria-controls="home" role="tab" data-toggle="tab">Map</a></li>
					<li role="presentation"><a href="#tab-chord"
						aria-controls="profile" role="tab" data-toggle="tab">Wars</a></li>
				</ul>

				<!-- Tab panes -->
				<div class="tab-content">
					<div role="tabpanel" class="tab-pane active" id="tab-map">
						<div id="map" style="width: 750px; height: 750px"></div>
						#parse("map.vm")
					</div>
					<div role="tabpanel" class="tab-pane" id="tab-chord"></div>
				</div>
			</div>

		</div>





		<ul>
			#foreach($entry in $entityMap.entrySet()) #set($race = $entry.key)
			#set($entities = $entry.value)
			<li>$race</li>
			<ul>
				#foreach($entity in $entities)
				<li>$entity.link</li> #end
			</ul>
			#end
		</ul>
	</div>


	<script>
		$(function() {
			#foreach($entry in $entityMap.entrySet())
				#set($race = $entry.key)
				#set($entities = $entry.value)
				#foreach($entity in $entities)
					// $entity.name
					#foreach($site in $entity.sites)
						addSite('$site.link', $site.x, $site.y, '$entity.color');
					#end
				#end
			#end	
		});
	</script>


	<script src="//d3js.org/d3.v3.min.js"></script>

	<script>

var outerRadius = 750 / 2,
    innerRadius = outerRadius - 230;

var colors = [];
var nameByIndex = d3.map();

var fill = function(e) {
	return colors[e];
}

var chord = d3.layout.chord()
    .padding(.04);
    /*
    .sortGroups(function(e1,e2) {
    	return nameByIndex.get(e1).race.localeCompare(nameByIndex.get(e2).race);
    });
    /*
    .sortSubgroups(function(e1,e2) {
    	return nameByIndex.get(e1).race.localeCompare(nameByIndex.get(e2).race);
    })
    .sortChords(function(e1,e2) {
    	return nameByIndex.get(e1).race.localeCompare(nameByIndex.get(e2).race);
    });*/

var arc = d3.svg.arc()
    .innerRadius(innerRadius)
    .outerRadius(innerRadius + 20);

var svg = d3.select("#tab-chord").append("svg")
    .attr("width", outerRadius * 2)
    .attr("height", outerRadius * 2)
  .append("g")
    .attr("transform", "translate(" + outerRadius + "," + outerRadius + ")");

d3.json("entities.json", function(error, imports) {
  if (error) throw error;

  var indexByName = d3.map(),
      matrix = [],
      n = 0;

  // Returns the Flare package name for the given class name.
  function name(name) {
    return name;
  }

  // Compute a unique index for each package name.
  imports.forEach(function(d) {
    if (!indexByName.has(d.name)) {
      nameByIndex.set(n, d);
      indexByName.set(d.name, n++);
    }
  });

  // Construct a square matrix counting package imports.
  imports.forEach(function(d) {
    var source = indexByName.get(name(d.name)),
        row = matrix[source];
  	colors[source] = d.color;
    if (!row) {
     row = matrix[source] = [];
     for (var i = -1; ++i < n;) row[i] = 0;
    }
    
    
    d.enemies.forEach(function(d) { row[indexByName.get(name(d.name))]++; });
  });
  
  chord.matrix(matrix);

  var g = svg.selectAll(".group")
      .data(chord.groups)
    .enter().append("g")
      .attr("class", "group");

  g.append("path")
      .style("fill", function(d) { return fill(d.index); })
      .style("stroke", function(d) { return fill(d.index); })
      .attr("d", arc);

  g.append("text")
      .each(function(d) { d.angle = (d.startAngle + d.endAngle) / 2; })
      .attr("dy", ".35em")
      .attr("transform", function(d) {
        return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
            + "translate(" + (innerRadius + 26) + ")"
            + (d.angle > Math.PI ? "rotate(180)" : "");
      })
      .style("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })
      .text(function(d) { return nameByIndex.get(d.index).name; });

  svg.selectAll(".chord")
      .data(chord.chords)
    .enter().append("path")
      .attr("class", "chord")
      .style("stroke", function(d) { return d3.rgb(
    		  fill(d.source.value > d.target.value ? 
    				  d.source.index : 
    					d.target.index));  })
      .style("fill", function(d) { return d3.rgb(
    		  fill(d.source.value > d.target.value ? 
    				  d.source.index : 
    					d.target.index)).darker(); }) // fill(d.source.index);
      .attr("d", d3.svg.chord().radius(innerRadius));

});

d3.select(self.frameElement).style("height", outerRadius * 2 + "px");

</script>
</div>

#end
