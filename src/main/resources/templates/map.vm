<script>

	var sitesLayer = L.layerGroup();
	var constructionsLayer = L.layerGroup();
	var landmassesLayer = L.layerGroup();
	var regionsLayer = L.layerGroup();
	var mountainsLayer = L.layerGroup();

	var map = L.map('map', {
		maxZoom : 6,
		minZoom : 0,
		crs : L.CRS.Simple,
		layers: [sitesLayer, constructionsLayer, mountainsLayer]
	}); //.setView([ $World.getMapTileWidth() / 2, $World.getMapTileHeight() / 2 ], 1);

	
	map.getBoundsZoom = function (bounds, inside, padding) { // (LatLngBounds[, Boolean, Point]) -> Number
		bounds = L.latLngBounds(bounds);

		var zoom = this.getMinZoom() - (inside ? 1 : 0),
		    maxZoom = this.getMaxZoom(),
		    size = this.getSize(),

		    nw = bounds.getNorthWest(),
		    se = bounds.getSouthEast(),

		    zoomNotFound = true,
		    boundsSize;

		padding = L.point(padding || [0, 0]);

		var incement = 0.02;
		do {
			zoom += incement;
			boundsSize = this.project(se, zoom).subtract(this.project(nw, zoom)).add(padding).floor();
			zoomNotFound = !inside ? size.contains(boundsSize) : boundsSize.x < size.x || boundsSize.y < size.y;

		} while (zoomNotFound && zoom <= maxZoom);

		if (zoomNotFound && inside) {
			return null;
		}

		return inside ? zoom : zoom - incement;
	}
	
	var overlayMaps = {
		    "Sites": sitesLayer,
		    "World Constructions": constructionsLayer,
		    "Mountain Peaks": mountainsLayer,
		    "Landmasses": landmassesLayer,
		    "Regions": regionsLayer
		};
	
	#if($layerControl)
		L.control.layers(null,overlayMaps).addTo(map);
	#end
	
	var bounds = new L.LatLngBounds([ 0, 0 ], [ $World.getMapTileWidth(),
			$World.getMapTileHeight() ]);
	map.setMaxBounds(bounds);
	map.fitBounds(bounds);
	
	map.options.minZoom = map.getZoom();

	var imageUrl = '$suburi/map'
	var imageBounds = [ [ 0, 0 ],
			[ $World.getMapTileWidth(), $World.getMapTileHeight() ] ];

	var imageLayer = L.imageOverlay(imageUrl, imageBounds, {opacity: 0.5});
	imageLayer.addTo(map);

	var opacitySlider = new L.Control.opacitySlider();
	map.addControl(opacitySlider);
	opacitySlider.setOpacityLayer(imageLayer);
	//var miniMap = new L.Control.MiniMap(L.imageOverlay(imageUrl, imageBounds), {zoomLevelFixed: 0}).addTo(map);

	var siteOffset = 0.1;
	var structureOffset = 0.35;
	var battleOffset = 0.2;
	var mountainOffset = -0.2;
	
	function addSite(name, y, x, color) {
		x = $World.getMapTileHeight() - x - 1;
		var polygon = L.polygon(
				[ [ x + siteOffset, y + siteOffset ], [ x + siteOffset, y + 1 - siteOffset ], [ x + 1 - siteOffset, y + 1 - siteOffset ], [ x + 1 - siteOffset, y + siteOffset ] ], {
					color : color,
					opacity: 1, fillOpacity: 0.7,
					weight : 3
				}).addTo(sitesLayer);

		polygon.bindPopup(name);

		minx = Math.min(x, minx);
		miny = Math.min(y, miny);
		maxx = Math.max(x, maxx);
		maxy = Math.max(y, maxy);
	}
	
	function addWc(name, y, x, color) {
		x = $World.getMapTileHeight() - x - 1;
		var polygon = L.polygon(
				[ [ x + structureOffset, y + structureOffset ], [ x + structureOffset, y + 1 - structureOffset ], [ x + 1 - structureOffset, y + 1 - structureOffset ], [ x + 1 - structureOffset, y + structureOffset ] ], {
					color : color,
					opacity: 1, fillOpacity: 0.7,
					weight : 3
				}).addTo(constructionsLayer);

		polygon.bindPopup(name);
	}
	
	function addRegion(name, y1, x1, y2, x2, color) {
		x1--; y2++;
		x1 = $World.getMapTileHeight() - x1 - 1;
		x2 = $World.getMapTileHeight() - x2 - 1;
		var polygon = L.polygon(
				[ [ x1, y1 ], [ x1, y2 ], [ x2, y2 ], [ x2, y1 ] ], {
					color : color,
					opacity: 0.5, fillOpacity: 0.3,
					weight : 1
				}).addTo(landmassesLayer);

		polygon.bindPopup(name);
	}

	function addMountain(name, y, x, color) {
		x = $World.getMapTileHeight() - x - 1;
		var polygon = L.polygon(
				[ [ x + mountainOffset / 2, y + mountainOffset], [ x + mountainOffset / 2, y + 1 - mountainOffset ], [ x + 1 - mountainOffset, y + 0.5 ] ], {
					color : color,
					opacity: 1, fillOpacity: 0.7,
					weight : 3
				}).addTo(mountainsLayer);

		polygon.bindPopup(name);

		minx = Math.min(x, minx);
		miny = Math.min(y, miny);
		maxx = Math.max(x, maxx);
		maxy = Math.max(y, maxy);
	}

	function coord(x, y) {
		return [ $World.getMapTileHeight() - y - 1, x ];
	}
	
	function addBattle(name, y, x) {
		x = $World.getMapTileHeight() - x - 1;
		var polygon = L.polygon(
				[ [ x + 0.5,     y + battleOffset ], 
				  [ x + battleOffset,     y + 0.5 ], 
				  [ x + 0.5, y + 1 - battleOffset ], 
				  [ x + 1 - battleOffset, y + 0.5 ] ], {
					color : '#f00',
					opacity: 1, fillOpacity: 0.7,
					weight : 3
				}).addTo(map);
		
		polygon.bindPopup(name);

		minx = Math.min(x, minx);
		miny = Math.min(y, miny);
		maxx = Math.max(x, maxx);
		maxy = Math.max(y, maxy);
	}

	var minx = 1000, miny = 1000, maxx = 0, maxy = 0;

	function zoomTo(y, x, zoom) {
		x = $World.getMapTileHeight() - x - 1;
		map.setView([ x, y ], zoom);
	}

	function zoom() {
		console.log(minx, miny, maxx, maxy);
		var sw = L.latLng(minx, miny), ne = L.latLng(maxx, maxy);
		var bounds = new L.LatLngBounds(sw, ne);
		console.log(sw, ne, bounds);
		map.fitBounds(bounds);
	}
</script>